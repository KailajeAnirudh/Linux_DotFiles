!function(){"use strict";class e{static IsValidDataField(e){return null!=e&&e.length>0&&"null"!==e}static isElementDisabled(t,a){return(a??e.GetFirstVisibleElement(t)).disabled}static RunQuerySelectorAll(e){const t=e.split("<");let a=document.querySelectorAll(t[0]);for(const e of t.slice(1)){const t=a[0]?.shadowRoot;if(!t)return[];a=t.querySelectorAll(e)}return a}static IsElementVisible(e){return e&&e.offsetWidth>0&&e.offsetHeight>0}static CountVisibleElements(t){if(!e.IsValidDataField(t))return 0;const a=e.RunQuerySelectorAll(t);let i=0;for(const t of a)e.IsElementVisible(t)&&i++;return i}static GetFirstVisibleElement(t){if(!e.IsValidDataField(t))return;const a=t.split(";");for(const t of a)try{const a=e.RunQuerySelectorAll(t);for(const t of a)if(e.IsElementVisible(t))return t}catch(e){window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: GetFirstVisibleElement error",e)}}static Sleep(e){return new Promise((t=>setTimeout(t,e)))}static async WaitForCondition(t,a,i){const l=(new Date).getTime();for(window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: waiting");!await t()&&l+a>(new Date).getTime();)await e.Sleep(i??100);return window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: wait completed."),await t()}static async IsFieldVisible(t){return e.CountVisibleElements(t)>0}}class t{static Click(t,a,i){const l=a??e.GetFirstVisibleElement(t);return!!l&&(window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: click element visible",l,l.innerText),e.isElementDisabled(void 0,l)||function(e){const t=["mousedown","click","mouseup"];if(i){let a=!1;t.forEach((t=>e.addEventListener(t,(()=>{a||(a=!0,i())}))))}t.forEach((t=>e.dispatchEvent(new MouseEvent(t,{bubbles:!0,buttons:1,cancelable:!0,view:window}))))}(l),!0)}static SetBoxValue(t,a){const i=document.createEvent("Events");i.initEvent("change",!0,!1);const l=document.createEvent("Events");l.initEvent("input",!0,!1);const o=new KeyboardEvent("keyup",{bubbles:!0,cancelable:!0,view:window}),n=e.GetFirstVisibleElement(t);return n?(n.blur(),n.dispatchEvent(i),n.focus(),n.setAttribute("value",a),n.value=a,n.dispatchEvent(o),n.dispatchEvent(l),n.dispatchEvent(i),n.blur(),!0):(window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: input box undefined"),!1)}}var a;function i(e){window.WalletCheckoutScriptAutofillRuntime.postMessageToHost("AutofillComplete",e)}async function l(a){const{Name:i,Selector:l,Type:o,ValueList:n,WaitBefore:s}=a;"button"==o&&0==n?.length||await e.Sleep(s||0);const c=await e.IsFieldVisible(l);if(window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: isSelectorVisible",i,c),!c)throw new Error("Selector not found");"input"===o?t.SetBoxValue(l,n?.[0]):"button"===o&&(window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: click",l),t.Click(l))}function o(e,t){const a=new RegExp(`(?<![a-zA-Z0-9])${e}(?![a-zA-Z])`,"i");return t?.match(a)}function n(e,i,l){for(const n of e){const e=(n?.innerText||n?.innerHTML)?.toUpperCase()?.trim();let s=!1;if(s=l===a.ExactMatch?i.some((t=>t===e)):i.some((t=>o(t,e))),s)return t.Click(void 0,n),!0}}function s(t,i,l){const o=e.RunQuerySelectorAll(i),s=l?.map((e=>e.toUpperCase())),c=n(o,s,a.ExactMatch);if(window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: canExactMatch",t,c),c)return;const d=n(o,s,a.RegMatch);window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: canRegMatch",t,d)}async function c(a){const{Name:i,ValueList:l,WaitForVisible:o,ArrowDownSelector:n,SecondarySelector:c,SecondaryType:d}=a;if(c){const a=await e.WaitForCondition((async()=>await e.IsFieldVisible(c)),o||0);if(window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: isSecondarySelectorVisible",i,a),!a)throw new Error("Secondary selector not found");if("option"===d)if(n)for(;!e.isElementDisabled(n);)t.Click(n,void 0,(()=>{s(i,c,l)}));else s(i,c,l);else"button"===d&&t.Click(c)}}!function(e){e[e.ExactMatch=0]="ExactMatch",e[e.RegMatch=1]="RegMatch"}(a||(a={})),window.WalletCheckoutScriptAutofillRuntime=new class{initialize(){return window.loadTimeData={data_:{isDebugEnabled:!0}},window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: Wallet Checkout Script Autofill Initialize"),!0}raiseMessageFromHost(e){window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: raiseMessageFromHost",e);if("WalletCheckoutScriptAutofill"===e.shift())try{"interactive"===document.readyState||"complete"===document.readyState?window.ExecuteAutofill(e):window.addEventListener?.("DOMContentLoaded",(()=>{window.ExecuteAutofill(e)}))}catch(e){window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: raiseMessageFromHost error",e)}}postMessageToHost(e,t){window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: postMessageToHost",e,t);try{walletCheckoutAutofillNativeHandler&&walletCheckoutAutofillNativeHandler.sendMessageToHost(e,t)}catch(e){window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: postMessageToHost error",e)}}},window.ExecuteAutofill=async function(e){window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: ExecuteAutofill",e);try{const t=e?.[0],a=e?.[1],o=JSON.parse(t??"{}"),n=JSON.parse(a??"{}"),{CheckoutElements:s=[]}=o,{IsDebugEnabled:d}=n;window.loadTimeData={data_:{isDebugEnabled:d}};let u=!0;const r=[];for(const e of s){const{Name:t,Selector:a,SecondarySelector:i}=e;if(a)try{await l(e)}catch(e){u=!1,r.push({failedField:t,failedReason:e.message});continue}if(i)try{await c(e)}catch(e){u=!1,r.push({failedField:t,failedReason:e.message})}}i([JSON.stringify({isSuccess:u,failureDetails:r?.length>0?r:null})])}catch(e){window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: ExecuteAutofill error",e),i([JSON.stringify({isSuccess:!1,failureDetails:null})])}}}();